# Напишите класс PersonInfo
# Экземпляр класса создается из следующих атрибутов:
# 1. Строка - "Имя Фамилия"
# 2. Число - возраст сотрудника
# 3. Подразделения от головного до того, где работает сотрудник.
# Реализуйте методы класса:
# 1. short_name, который возвращает строку Фамилия И.
# 2. path_deps, возвращает путь "Головное подразделение --> ... --> Конечное подразделение"
# 3. new_salary, Директор решил проиндексировать зарплаты, и новая зарпалата теперь вычисляет по формуле:
# 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
# (регистр имеет значение "А" и "а" - разные буквы)
# Например (Ввод --> Вывод) :
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').short_name() --> 'Шленский А.'
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').path_deps() -->
#            'Разработка --> УК --> Автотесты'
# PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты').new_salary() --> 385056 т.к.
# т.к. буква "т" встречается 4 раза, "а" 3 раза, 'о' 2 раза, остальные по одной. Сумма трёх самых частых букв 4+3+2 = 9.
# 1337*32*9 = 385056

class PersonInfo:
    """
    Класс для получения:
        1) короткого имени сотрудника, в формате - "Фамилия И."
        2) путь подразделения, в формате - "Головное подразделение --> ... --> Конечное подразделение"
        3) проиндексированной зарплаты по формуле: 1337*Возраст*суммарное кол-во вхождений трех наиболее часто
           встречающихся букв из списка подразделений
    ---------
    Атрибуты:
        full_name: Строка(str) - Имя Фамилия сотрудника
        age: Число(int) - Возраст сотрудника
        departments: Кортеж(tuple) - Подразделение, где работает сотрудник
    ---------
    Методы:
        short_name():
            Получает короткое имя сотрудника, в формате - "Фамилия И."
        path_deps():
            Получает путь подразделения сотрудника, в формате-"Головное подразделение --> ... -->Конечное подразделение"
        new_salary():
            Получает зарплату по формуле: 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв
            из списка подразделений
    """
    def __init__(self, full_name, age, *departments):
        """
        Инициализация необходимых атрибутов для объекта PersonInfo
        :param full_name: Имя Фамилия сотрудника
        :param age: Возраст сотрудника
        :param departments: Подразделение, где работает сотрудник
        """
        self.full_name = full_name
        self.age = age
        self.departments = departments

    def short_name(self):
        """
        Получить короткое имя сотрудника, в формате - "Фамилия И."
        :return: (f'{last_name} {first_name[0]}.') Короткое имя
        """
        first_name, last_name = self.full_name.split()
        return f'{last_name} {first_name[0]}.'

    def path_deps(self):
        """
        Получить путь подразделения сотрудника, в формате - "Головное подразделение --> ... --> Конечное подразделение"
        :return: (' --> '.join(self.departments)) Путь подразделения
        """
        return ' --> '.join(self.departments)

    def new_salary(self):
        """
        Получить зарплату по формуле: 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв из
        списка подразделений
        :return: (salary) Проиндексированная(элитная) зарплата
        """
        word_count = {}
        leet = 1337
        for department in self.departments:
            for word in department:
                word_count[word] = word_count.get(word, 0) + 1
        top_word = sorted(word_count, key=lambda x: word_count[x], reverse=True)[:3]
        sum_words = sum(word_count[word] for word in top_word)
        salary = leet * self.age * sum_words
        return salary

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


first_person = PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты')
fourth_person = PersonInfo('Иван Иванов', 26, 'Разработка')
second_person = PersonInfo('Пётр Валерьев', 47, 'Разработка', 'УК')
third_person = PersonInfo('Макар Артуров', 51, 'Разработка', 'УК', 'Нефункциональное тестирование', 'Автотестирование')

data = [first_person.short_name,
        second_person.short_name,
        third_person.short_name,
        fourth_person.short_name,

        first_person.path_deps,
        second_person.path_deps,
        third_person.path_deps,
        fourth_person.path_deps,

        first_person.new_salary,
        second_person.new_salary,
        third_person.new_salary,
        fourth_person.new_salary
        ]


test_data = ['Шленский А.', 'Валерьев П.', 'Артуров М.', 'Иванов И.',

             'Разработка --> УК --> Автотесты',
             'Разработка --> УК',
             'Разработка --> УК --> Нефункциональное тестирование --> Автотестирование',
             'Разработка',
             385056, 314195, 1227366, 173810]

for i, d in enumerate(data):
    assert_error = f'Не прошла проверка для метода {d.__qualname__} экземпляра с атрибутами {d.__self__.__dict__}'
    assert d() == test_data[i], assert_error
    print(f'Набор для метода {d.__qualname__} экземпляра класса с атрибутами {d.__self__.__dict__} прошёл проверку')
print('Всё ок')